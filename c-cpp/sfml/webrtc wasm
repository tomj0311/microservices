https://webrtchacks.com/webassembly-experiments/
https://bloggeek.me/choosing-webrtc-open-source-media-server/

JITSI in AWS - https://meetrix.io/blog/webrtc/jitsi/meet/installing.html
GO - https://github.com/strukturag/spreed-webrtc

https://medium.com/linagora-engineering/scalability-in-video-conferencing-part-2-c63e8b22ed47

http://blog.brkho.com/2017/03/15/dive-into-client-server-web-games-webrtc/

very userfu artcle - https://bloggeek.me/webrtc-h264-video-codec-hardware-support/

The full WebRTC stack includes video/audio streaming with vp8/vp9/h264 codecs & data is packaged using RTP. 
Well WebRTC is generally p2p, however you could setup a "Server Peer" and designate it as having a source channel only (ie there is no input channel).This peer then becomes the "server" and all the other peers can view its contents when they connect.

https://github.com/muaz-khan/WebRTC-Scalable-Broadcast

MCU lib for webrtc - https://github.com/btagliani/erizo
https://www.kurento.org/blog/kurento-webrtc-gateway-ip-cameras

Tests - https://github.com/webrtc/KITE
https://github.com/mbasso/awesome-wasm#video
https://hacks.mozilla.org/2019/08/webassembly-interface-types/

https://blog.logrocket.com/image-styling-and-filters-using-webassembly/

WebGL good source - https://dannywoodz.wordpress.com/2015/10/14/webgl-from-scratch-updating-textures/
SDL2 + C++11 + OpenGL -> http://headerphile.com/
https://caveofprogramming.com/guest-posts/drawing-an-image-sdl.html

SDL_Rect for defining dimensions of the rendering image
We learned some of the basics. Now, we can render images easily but there is still one problem: how can we simply put it to a specific position on the window with a particular size? Well, SDL solves this issue with the structure called SDL_Rect. SDL_Rect contains four integers called as x, y, w and h.
Link to article very good -> https://caveofprogramming.com/guest-posts/drawing-an-image-sdl.html
